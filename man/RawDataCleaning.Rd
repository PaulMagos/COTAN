% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/COTAN-getters.R, R/COTAN-modifiers.R,
%   R/clean-method.R, R/clean-plot.R
\name{flagNotHousekeepingGenes,COTAN-method}
\alias{flagNotHousekeepingGenes,COTAN-method}
\alias{flagNotFullyExpressedCells,COTAN-method}
\alias{getHousekeepingGenes,COTAN-method}
\alias{getFullyExpressedCells,COTAN-method}
\alias{findHousekeepingGenes,COTAN-method}
\alias{findFullyExpressedCells,COTAN-method}
\alias{dropGenesCells,COTAN-method}
\alias{clean,COTAN-method}
\alias{cleanPlots}
\title{Raw data cleaning}
\usage{
\S4method{flagNotHousekeepingGenes}{COTAN}(objCOTAN)

\S4method{flagNotFullyExpressedCells}{COTAN}(objCOTAN)

\S4method{getHousekeepingGenes}{COTAN}(objCOTAN)

\S4method{getFullyExpressedCells}{COTAN}(objCOTAN)

\S4method{findHousekeepingGenes}{COTAN}(objCOTAN)

\S4method{findFullyExpressedCells}{COTAN}(objCOTAN)

\S4method{dropGenesCells}{COTAN}(objCOTAN, genes = c(), cells = c())

\S4method{clean}{COTAN}(objCOTAN)

cleanPlots(objCOTAN)
}
\arguments{
\item{objCOTAN}{a \code{COTAN} object}

\item{genes}{an array of gene names}

\item{cells}{an array of cell names}
}
\value{
\code{flagNotHousekeepingGenes()} returns a Booleans array with TRUE for
genes that are not housekeeping

\code{flagNotFullyExpressedCells()} returns an array of Booleans with
TRUE for cells that are not fully expressed

\code{getHousekeepingGenes()} returns an array containing all genes
that are expressed in all cells

\code{getFullyExpressedCells()} returns an array containing all cells
that express all genes

\code{findHousekeepingGenes()} returns the given \code{COTAN} object with
updated housekeeping genes' information

\code{findFullyExpressedCells()} returns the given \code{COTAN} object with
updated fully expressed cells' information

\code{dropGenesCells()} returns a completely new \code{COTAN} object with the
new raw data obtained after the indicated genes/cells were expunged. Only
the meta-data for the data-set are kept, while the rest is dropped as no
more relevant with the restricted matrix

\code{clean()} returns the updated \code{COTAN} object

\code{cleanPlots()} returns a \code{list} of \code{ggplot2} plots:
\itemize{
\item "pcaCells" is for pca cells,
\item "pcaCellsData" is the data of the pca cells,
\item "genes" is for cluster2 cells' group genes,
\item "UDE" is for cell UDE,
\item "nu" is for cell nu.
}
}
\description{
These methods are to be used to clean the raw data. That is drop
any number of genes/cells that are too sparse or too present to allow
proper calibration of the \code{COTAN} model.

We call genes that are expressed in all cells \emph{House Keeping} while cells
that express all genes in the data are called \emph{Fully Expressed}. In case it
has been made quite easy to excelude the flagged genes/cells in the user
calculations.
}
\details{
\code{flagNotHousekeepingGenes()} returns a Boolean array with TRUE for
those genes that are not housekeeping.

\code{flagNotFullyExpressedCells()}returns a Boolean vector with TRUE for
those cells that are not fully expressed

\code{getHousekeepingGenes()} returns the genes expressed in all cells of
the dataset

\code{getFullyExpressedCells()} returns the cells that did express
all genes of the dataset

\code{findHousekeepingGenes()} determines the housekeeping genes inside
the raw data

\code{findFullyExpressedCells()} determines the fully expressed cells
inside the raw data

\code{dropGenesCells()} removes an array of genes and/or cells from the
current \code{COTAN} object.

\code{clean()} is the main method that can be used to check and clean the
dataset. It will discard any genes that has less than 3 non-zero counts per
thousand cells and all cells expressing less than 2 per thousand genes. It
also produces and stores the estimators for nu and lambda

\code{cleanPlots()} creates the plots associated to the output of the
\code{\link[=clean]{clean()}} method.
}
\examples{
data("test.dataset")
objCOTAN <- COTAN(raw = test.dataset)

genes.to.rem <- getGenes(objCOTAN)[grep('^MT', getGenes(objCOTAN))]
cells.to.rem <- getCells(objCOTAN)[which(getCellsSize(objCOTAN) == 0)]
objCOTAN <- dropGenesCells(objCOTAN, genes.to.rem, cells.to.rem)

objCOTAN <- clean(objCOTAN)

objCOTAN <- findHousekeepingGenes(objCOTAN)
goodPos <- flagNotHousekeepingGenes(objCOTAN)

objCOTAN <- findFullyExpressedCells(objCOTAN)
goodPos <- flagNotFullyExpressedCells(objCOTAN)

hkGenes <- getHousekeepingGenes(objCOTAN)

feCells <- getFullyExpressedCells(objCOTAN)

objCOTAN <- clean(objCOTAN)

plots <- cleanPlots(objCOTAN)

}
